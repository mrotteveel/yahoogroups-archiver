/*
 * This file is generated by jOOQ.
 */
package nl.lawinegevaar.yahoogroups.database.jooq.tables;


import nl.lawinegevaar.yahoogroups.database.jooq.DefaultSchema;
import nl.lawinegevaar.yahoogroups.database.jooq.tables.records.TransitionsRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transitions extends TableImpl<TransitionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TRANSITIONS</code>
     */
    public static final Transitions TRANSITIONS = new Transitions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransitionsRecord> getRecordType() {
        return TransitionsRecord.class;
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<TransitionsRecord, Object> RDB$START_TIMESTAMP = createField(DSL.name("RDB$START_TIMESTAMP"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"UNKNOWN\"").nullable(false), this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<TransitionsRecord, Object> RDB$END_TIMESTAMP = createField(DSL.name("RDB$END_TIMESTAMP"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"UNKNOWN\"").nullable(false), this, "");

    /**
     * The column <code>TRANSITIONS.RDB$ZONE_OFFSET</code>.
     */
    public final TableField<TransitionsRecord, Short> RDB$ZONE_OFFSET = createField(DSL.name("RDB$ZONE_OFFSET"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>TRANSITIONS.RDB$DST_OFFSET</code>.
     */
    public final TableField<TransitionsRecord, Short> RDB$DST_OFFSET = createField(DSL.name("RDB$DST_OFFSET"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>TRANSITIONS.RDB$EFFECTIVE_OFFSET</code>.
     */
    public final TableField<TransitionsRecord, Short> RDB$EFFECTIVE_OFFSET = createField(DSL.name("RDB$EFFECTIVE_OFFSET"), SQLDataType.SMALLINT.nullable(false), this, "");

    private Transitions(Name alias, Table<TransitionsRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.CHAR(63).nullable(false)),
            DSL.val(null, org.jooq.impl.DefaultDataType.getDefaultDataType("\"UNKNOWN\"").nullable(false)),
            DSL.val(null, org.jooq.impl.DefaultDataType.getDefaultDataType("\"UNKNOWN\"").nullable(false))
        });
    }

    private Transitions(Name alias, Table<TransitionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>TRANSITIONS</code> table reference
     */
    public Transitions(String alias) {
        this(DSL.name(alias), TRANSITIONS);
    }

    /**
     * Create an aliased <code>TRANSITIONS</code> table reference
     */
    public Transitions(Name alias) {
        this(alias, TRANSITIONS);
    }

    /**
     * Create a <code>TRANSITIONS</code> table reference
     */
    public Transitions() {
        this(DSL.name("TRANSITIONS"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Transitions as(String alias) {
        return new Transitions(DSL.name(alias), this, parameters);
    }

    @Override
    public Transitions as(Name alias) {
        return new Transitions(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Transitions rename(String name) {
        return new Transitions(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Transitions rename(Name name) {
        return new Transitions(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Object, Object, Short, Short, Short> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public Transitions call(
          String rdb$timeZoneName
        , Object rdb$fromTimestamp
        , Object rdb$toTimestamp
    ) {
        Transitions result = new Transitions(DSL.name("TRANSITIONS"), null, new Field[] {
            DSL.val(rdb$timeZoneName, SQLDataType.CHAR(63).nullable(false)),
            DSL.val(rdb$fromTimestamp, org.jooq.impl.DefaultDataType.getDefaultDataType("\"UNKNOWN\"").nullable(false)),
            DSL.val(rdb$toTimestamp, org.jooq.impl.DefaultDataType.getDefaultDataType("\"UNKNOWN\"").nullable(false))
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public Transitions call(
          Field<String> rdb$timeZoneName
        , Field<Object> rdb$fromTimestamp
        , Field<Object> rdb$toTimestamp
    ) {
        Transitions result = new Transitions(DSL.name("TRANSITIONS"), null, new Field[] {
            rdb$timeZoneName,
            rdb$fromTimestamp,
            rdb$toTimestamp
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
