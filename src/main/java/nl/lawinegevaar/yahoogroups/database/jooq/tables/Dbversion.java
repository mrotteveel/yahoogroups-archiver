/*
 * This file is generated by jOOQ.
 */
package nl.lawinegevaar.yahoogroups.database.jooq.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import nl.lawinegevaar.yahoogroups.database.jooq.DefaultSchema;
import nl.lawinegevaar.yahoogroups.database.jooq.Keys;
import nl.lawinegevaar.yahoogroups.database.jooq.tables.records.DbversionRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dbversion extends TableImpl<DbversionRecord> {

    private static final long serialVersionUID = 2120929919;

    /**
     * The reference instance of <code>DBVERSION</code>
     */
    public static final Dbversion DBVERSION = new Dbversion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DbversionRecord> getRecordType() {
        return DbversionRecord.class;
    }

    /**
     * The column <code>DBVERSION.VERSION</code>.
     */
    public final TableField<DbversionRecord, Integer> VERSION = createField(DSL.name("VERSION"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DBVERSION.MIGRATION_DATE</code>.
     */
    public final TableField<DbversionRecord, Timestamp> MIGRATION_DATE = createField(DSL.name("MIGRATION_DATE"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("default current_timestamp", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>DBVERSION</code> table reference
     */
    public Dbversion() {
        this(DSL.name("DBVERSION"), null);
    }

    /**
     * Create an aliased <code>DBVERSION</code> table reference
     */
    public Dbversion(String alias) {
        this(DSL.name(alias), DBVERSION);
    }

    /**
     * Create an aliased <code>DBVERSION</code> table reference
     */
    public Dbversion(Name alias) {
        this(alias, DBVERSION);
    }

    private Dbversion(Name alias, Table<DbversionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dbversion(Name alias, Table<DbversionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Dbversion(Table<O> child, ForeignKey<O, DbversionRecord> key) {
        super(child, key, DBVERSION);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<DbversionRecord> getPrimaryKey() {
        return Keys.PK_DBVERSION;
    }

    @Override
    public List<UniqueKey<DbversionRecord>> getKeys() {
        return Arrays.<UniqueKey<DbversionRecord>>asList(Keys.PK_DBVERSION);
    }

    @Override
    public Dbversion as(String alias) {
        return new Dbversion(DSL.name(alias), this);
    }

    @Override
    public Dbversion as(Name alias) {
        return new Dbversion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dbversion rename(String name) {
        return new Dbversion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dbversion rename(Name name) {
        return new Dbversion(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Timestamp> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
