/*
 * This file is generated by jOOQ.
 */
package nl.lawinegevaar.yahoogroups.database.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import nl.lawinegevaar.yahoogroups.database.jooq.DefaultSchema;
import nl.lawinegevaar.yahoogroups.database.jooq.Keys;
import nl.lawinegevaar.yahoogroups.database.jooq.tables.records.RawdataRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rawdata extends TableImpl<RawdataRecord> {

    private static final long serialVersionUID = -1028869722;

    /**
     * The reference instance of <code>RAWDATA</code>
     */
    public static final Rawdata RAWDATA = new Rawdata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RawdataRecord> getRecordType() {
        return RawdataRecord.class;
    }

    /**
     * The column <code>RAWDATA.GROUP_ID</code>.
     */
    public final TableField<RawdataRecord, Integer> GROUP_ID = createField(DSL.name("GROUP_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>RAWDATA.MESSAGE_ID</code>.
     */
    public final TableField<RawdataRecord, Integer> MESSAGE_ID = createField(DSL.name("MESSAGE_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>RAWDATA.MESSAGE_JSON</code>.
     */
    public final TableField<RawdataRecord, String> MESSAGE_JSON = createField(DSL.name("MESSAGE_JSON"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RAWDATA.RAW_MESSAGE_JSON</code>.
     */
    public final TableField<RawdataRecord, String> RAW_MESSAGE_JSON = createField(DSL.name("RAW_MESSAGE_JSON"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RAWDATA.LAST_UPDATE</code>.
     */
    public final TableField<RawdataRecord, LocalDateTime> LAST_UPDATE = createField(DSL.name("LAST_UPDATE"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("default current_timestamp", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>RAWDATA</code> table reference
     */
    public Rawdata() {
        this(DSL.name("RAWDATA"), null);
    }

    /**
     * Create an aliased <code>RAWDATA</code> table reference
     */
    public Rawdata(String alias) {
        this(DSL.name(alias), RAWDATA);
    }

    /**
     * Create an aliased <code>RAWDATA</code> table reference
     */
    public Rawdata(Name alias) {
        this(alias, RAWDATA);
    }

    private Rawdata(Name alias, Table<RawdataRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rawdata(Name alias, Table<RawdataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Rawdata(Table<O> child, ForeignKey<O, RawdataRecord> key) {
        super(child, key, RAWDATA);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<RawdataRecord> getPrimaryKey() {
        return Keys.PK_RAWDATA;
    }

    @Override
    public List<UniqueKey<RawdataRecord>> getKeys() {
        return Arrays.<UniqueKey<RawdataRecord>>asList(Keys.PK_RAWDATA);
    }

    @Override
    public List<ForeignKey<RawdataRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RawdataRecord, ?>>asList(Keys.FK_RAWDATA_YGROUP);
    }

    public Ygroup ygroup() {
        return new Ygroup(this, Keys.FK_RAWDATA_YGROUP);
    }

    @Override
    public Rawdata as(String alias) {
        return new Rawdata(DSL.name(alias), this);
    }

    @Override
    public Rawdata as(Name alias) {
        return new Rawdata(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rawdata rename(String name) {
        return new Rawdata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rawdata rename(Name name) {
        return new Rawdata(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, String, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
