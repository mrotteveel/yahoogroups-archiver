/*
 * This file is generated by jOOQ.
 */
package nl.lawinegevaar.yahoogroups.database.jooq.tables;


import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import nl.lawinegevaar.yahoogroups.database.jooq.DefaultSchema;
import nl.lawinegevaar.yahoogroups.database.jooq.tables.records.SitemapLinksRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SitemapLinks extends TableImpl<SitemapLinksRecord> {

    private static final long serialVersionUID = 359852949;

    /**
     * The reference instance of <code>SITEMAP_LINKS</code>
     */
    public static final SitemapLinks SITEMAP_LINKS = new SitemapLinks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SitemapLinksRecord> getRecordType() {
        return SitemapLinksRecord.class;
    }

    /**
     * The column <code>SITEMAP_LINKS.PATH</code>.
     */
    public final TableField<SitemapLinksRecord, String> PATH = createField(DSL.name("PATH"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>SITEMAP_LINKS.LAST_CHANGE</code>.
     */
    public final TableField<SitemapLinksRecord, LocalDateTime> LAST_CHANGE = createField(DSL.name("LAST_CHANGE"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * Create a <code>SITEMAP_LINKS</code> table reference
     */
    public SitemapLinks() {
        this(DSL.name("SITEMAP_LINKS"), null);
    }

    /**
     * Create an aliased <code>SITEMAP_LINKS</code> table reference
     */
    public SitemapLinks(String alias) {
        this(DSL.name(alias), SITEMAP_LINKS);
    }

    /**
     * Create an aliased <code>SITEMAP_LINKS</code> table reference
     */
    public SitemapLinks(Name alias) {
        this(alias, SITEMAP_LINKS);
    }

    private SitemapLinks(Name alias, Table<SitemapLinksRecord> aliased) {
        this(alias, aliased, null);
    }

    private SitemapLinks(Name alias, Table<SitemapLinksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> SitemapLinks(Table<O> child, ForeignKey<O, SitemapLinksRecord> key) {
        super(child, key, SITEMAP_LINKS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public SitemapLinks as(String alias) {
        return new SitemapLinks(DSL.name(alias), this);
    }

    @Override
    public SitemapLinks as(Name alias) {
        return new SitemapLinks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SitemapLinks rename(String name) {
        return new SitemapLinks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SitemapLinks rename(Name name) {
        return new SitemapLinks(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, LocalDateTime> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
