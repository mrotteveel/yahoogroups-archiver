/*
 * This file is generated by jOOQ.
 */
package nl.lawinegevaar.yahoogroups.database.jooq.tables;


import java.util.Arrays;
import java.util.List;

import nl.lawinegevaar.yahoogroups.database.jooq.DefaultSchema;
import nl.lawinegevaar.yahoogroups.database.jooq.Keys;
import nl.lawinegevaar.yahoogroups.database.jooq.tables.records.YgroupRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ygroup extends TableImpl<YgroupRecord> {

    private static final long serialVersionUID = -1110257860;

    /**
     * The reference instance of <code>YGROUP</code>
     */
    public static final Ygroup YGROUP = new Ygroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<YgroupRecord> getRecordType() {
        return YgroupRecord.class;
    }

    /**
     * The column <code>YGROUP.ID</code>.
     */
    public final TableField<YgroupRecord, Integer> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>YGROUP.GROUPNAME</code>.
     */
    public final TableField<YgroupRecord, String> GROUPNAME = createField(DSL.name("GROUPNAME"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>YGROUP</code> table reference
     */
    public Ygroup() {
        this(DSL.name("YGROUP"), null);
    }

    /**
     * Create an aliased <code>YGROUP</code> table reference
     */
    public Ygroup(String alias) {
        this(DSL.name(alias), YGROUP);
    }

    /**
     * Create an aliased <code>YGROUP</code> table reference
     */
    public Ygroup(Name alias) {
        this(alias, YGROUP);
    }

    private Ygroup(Name alias, Table<YgroupRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ygroup(Name alias, Table<YgroupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Ygroup(Table<O> child, ForeignKey<O, YgroupRecord> key) {
        super(child, key, YGROUP);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<YgroupRecord> getPrimaryKey() {
        return Keys.PK_YGROUP;
    }

    @Override
    public List<UniqueKey<YgroupRecord>> getKeys() {
        return Arrays.<UniqueKey<YgroupRecord>>asList(Keys.PK_YGROUP, Keys.UQ_YGROUP_NAME);
    }

    @Override
    public Ygroup as(String alias) {
        return new Ygroup(DSL.name(alias), this);
    }

    @Override
    public Ygroup as(Name alias) {
        return new Ygroup(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ygroup rename(String name) {
        return new Ygroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ygroup rename(Name name) {
        return new Ygroup(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
